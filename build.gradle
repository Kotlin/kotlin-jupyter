import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
    ext.shadowJarVersion = "5.2.0"
    ext.kotlinVersion = '1.3.70-dev-2104'
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowJarVersion"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
//         only when using Kotlin EAP releases ...
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://kotlin.bintray.com/kotlin-dependencies' }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    }

    version = '0.7.3'

    ext.installPath = project.hasProperty('installPath') ?
            project.getProperty('installPath') :
            Paths.get(System.properties['user.home'].toString(), ".ipython", "kernels", "kotlin").toAbsolutePath().toString()
    ext.debugPort = 1044
    ext.debuggerConfig = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debugPort"
}

apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    deploy
}

dependencies {
    compile project(":jupyter-lib")
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-main-kts:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-dependencies:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-dependencies-maven:$kotlinVersion"

    compile "org.apache.maven:maven-core:3.0.3"
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile "khttp:khttp:1.0.0"
    compile 'org.zeromq:jeromq:0.3.5'
    compile 'com.beust:klaxon:5.2'
    runtime 'org.slf4j:slf4j-simple:1.7.25'
    runtime "org.jetbrains.kotlin:jcabi-aether:1.0-dev-3"
    runtime "org.sonatype.aether:aether-api:1.13.1"
    runtime "net.java.dev.jna:jna:5.4.0"

    deploy project(":jupyter-lib")
}

jar.manifest.attributes(
    'Main-class': 'org.jetbrains.kotlin.jupyter.IkotlinKt',
    'Implementation-Version': version
)

shadowJar {
    baseName = 'kotlin-jupyter-kernel'
    classifier = ''
    mergeServiceFiles()
}

task cleanInstallDir(){
    doLast {
        File installDir = new File("$installPath")
        installDir.deleteDir()
    }
}

task installKernel(type: Copy, dependsOn: [cleanInstallDir, shadowJar]) {
    from shadowJar.outputs
    into installPath
}

void createTaskForSpecs(Boolean debug) {
    String taskName = debug ? "createDebugSpecs" : "createSpecs"
    task(taskName) {
        dependsOn cleanInstallDir
        doLast {
            String sep = File.separator
            String spec = new File("kernelspec${sep}kernel.json.template").getText('UTF-8')
            File kernelFile = files { shadowJar }.singleFile
            spec = substitute(spec, "KERNEL_JAR_PATH", "$installPath${sep}${kernelFile.name}")

            String libsCp = files { configurations.deploy }.files.collect {
                "$installPath${sep}${it.name}"
            } .join(File.pathSeparator)
            spec = substitute(spec, "RUNTIME_CLASSPATH", libsCp)
            spec = substitute(spec, "DEBUGGER_CONFIG", debug ? "\"$debuggerConfig\"," : "")
            spec = substitute(spec, "KERNEL_HOME", "$installPath")
            File installDir = new File("$installPath")
            if (!installDir.exists()) {
                installDir.mkdirs();
            }
            new File("$installPath${sep}kernel.json").write(spec, 'UTF-8')
            Files.walk(Paths.get(projectDir.toPath().toString(), "kernelspec", "logos"))
                    .filter { Files.isRegularFile(it) }
                    .forEach {
                        Files.copy(it,
                                Paths.get(installPath, it.fileName.toString()),
                                StandardCopyOption.REPLACE_EXISTING)
                    }
        }
    }
}

static String substitute(String spec, String template, String val) {
    return spec.replace("\${$template}", val.replace("\\", "\\\\"))
}

task copyLibraries(type: Copy, dependsOn: cleanInstallDir) {
    from "libraries"
    into Paths.get(installPath, "libraries").toString()
}

createTaskForSpecs(true)
createTaskForSpecs(false)

task installLibs(type: Copy, dependsOn: cleanInstallDir) {
    into "$installPath"
    from configurations.deploy
}

task install(dependsOn: [installKernel, installLibs, createSpecs, copyLibraries]) {
}

task installDebug(dependsOn: [installKernel, installLibs, createDebugSpecs, copyLibraries]) {
}
