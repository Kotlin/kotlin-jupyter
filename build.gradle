import groovy.json.JsonOutput

import java.nio.file.Path
import java.nio.file.Paths
import java.util.regex.Pattern
import java.util.stream.Collectors

buildscript {
    ext.shadowJarVersion = "5.2.0"
    ext.kotlinVersion = '1.3.70-eap-3'
    ext.baseVersion = '0.7.41'
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowJarVersion"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        // only when using Kotlin EAP releases ...
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://kotlin.bintray.com/kotlin-dependencies' }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    }

    ext {
        packageName = "kotlin-jupyter-kernel"
        versionFileName = "VERSION"

        String artifactsPathStr = rootProject.findProperty('artifactsPath') ?: 'artifacts'
        String installPath = rootProject.findProperty('installPath')

        //noinspection GroovyAssignabilityCheck
        rootPath = rootDir.toPath()
        //noinspection GroovyAssignabilityCheck
        artifactsDir = rootPath.resolve(artifactsPathStr)

        //noinspection GroovyAssignabilityCheck
        installPathLocal = installPath ? Paths.get(installPath) :
                Paths.get(System.properties['user.home'].toString(), ".ipython", "kernels", "kotlin")
        //noinspection GroovyAssignabilityCheck
        distributionPath = rootPath.resolve("distrib")
        //noinspection GroovyAssignabilityCheck
        distribBuildPath = rootPath.resolve("distrib-build")
        //noinspection GroovyAssignabilityCheck
        logosPath = getSubDir(rootPath, "resources", "logos")

        if (project == rootProject) {
            isProtectedBranch = isProtectedBranch()
            String buildCounterStr = rootProject.findProperty('build.counter') ?: '100500'
            String buildNumber = rootProject.findProperty('build.number') ?: ''
            String devAddition = isProtectedBranch ? '' : '.dev1'
            String defaultBuildNumber = "$baseVersion.$buildCounterStr$devAddition"
            String buildNumberRegex = "[0-9]+(\\.[0-9]+){3}(\\.dev[0-9]+)?"

            if (!Pattern.matches(buildNumberRegex, buildNumber)) {
                def versionFile = artifactsDir.resolve(versionFileName).toFile()
                if (versionFile.exists()) {
                    def lines = versionFile.readLines()
                    assert !lines.empty, "There should be at least one line in VERSION file"
                    buildNumber = lines.first().trim()
                } else {
                    buildNumber = defaultBuildNumber
                }
            }

            project.version = buildNumber
            println("##teamcity[buildNumber '$version']")
        } else {
            isProtectedBranch = rootProject.isProtectedBranch
            project.version = rootProject.version
        }

        debugPort = 1044
        debuggerConfig = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debugPort".toString()

        mainSourceSetDir = "main"
        resourcesDir = "resources"
        runtimePropertiesFile = "runtime.properties"

        jarsPath = "jars"
        librariesPath = "libraries"
        kernelFile = "kernel.json"
        configDir = "config"
        // Straight slash is used 'cause it's universal across the platforms, and is used in jar_args config
        jarArgsFile = configDir + "/jar_args.json"

        distribKernelDir = "kernel"
        runKernelDir = "run_kotlin_kernel"
        setupPy = "setup.py"
        runKernelPy = "run_kernel.py"

        condaMetaDir = "conda"
        condaMetaYaml = "meta.yaml"
        condaPackageDir = "conda-package"
        condaPackageName = packageName
        condaPackageFileName = "$condaPackageName-${version}-py_0.tar.bz2".toString()

        pyPiPackageDir = "pip-package"
        pyPiPackageName = packageName.replaceAll("-", "_")
        pyPiPackageFileName = "$pyPiPackageName-${version}-py3-none-any.whl".toString()

        copyLibrariesTaskPrefix = "copyLibraries"
        installLibsTaskPrefix = "installLibs"
        installKernelTaskPrefix = "installKernel"
        cleanInstallDirTaskPrefix = "cleanInstallDir"

        localGroup = "local install"
        distribGroup = "distrib"
        condaGroup = "conda"
        pyPiGroup = "pip"
        buildGroup = "build"

        condaUserStable = rootProject.findProperty('condaUserStable') ?: ''
        condaPasswordStable = rootProject.findProperty('condaPasswordStable') ?: ''
        condaUserDev = rootProject.findProperty('condaUserDev') ?: ''

        stablePyPiUser = rootProject.findProperty('stablePyPiUser') ?: ''
        stablePyPiPassword = rootProject.findProperty('stablePyPiPassword') ?: ''
        devPyPiUser = rootProject.findProperty('devPyPiUser') ?: ''
        devPyPiPassword = rootProject.findProperty('devPyPiPassword') ?: ''
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    deploy
}

dependencies {
    compile project(":jupyter-lib")
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-main-kts:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-dependencies:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-dependencies-maven:$kotlinVersion"

    compile "org.apache.maven:maven-core:3.0.3"
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'khttp:khttp:1.0.0'
    compile 'org.zeromq:jeromq:0.3.5'
    compile 'com.beust:klaxon:5.2'
    compile 'com.github.ajalt:clikt:2.3.0'
    runtime 'org.slf4j:slf4j-simple:1.7.25'
    runtime "org.jetbrains.kotlin:jcabi-aether:1.0-dev-3"
    runtime "org.sonatype.aether:aether-api:1.13.1"
    runtime "net.java.dev.jna:jna:5.4.0"

    deploy project(":jupyter-lib")
}

jar.manifest.attributes(
    'Main-class': 'org.jetbrains.kotlin.jupyter.IkotlinKt',
    'Implementation-Version': version
)

task buildProperties(group: buildGroup) {
    def outputDir = file(getSubDir(buildDir.toPath(), resourcesDir, mainSourceSetDir))

    inputs.property "version", version
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        def propertiesFile = file(getSubDir(outputDir.toPath(), runtimePropertiesFile))
        propertiesFile.text = inputs.properties.entrySet().stream().map {
            "${it.key}=${it.value}\n"
        }.collect(Collectors.joining())
    }
}

processResources {
    dependsOn buildProperties
}

shadowJar {
    archiveBaseName.set(packageName)
    archiveClassifier.set('')
    mergeServiceFiles()
}

boolean isProtectedBranch() {
    def branchProp = 'build.branch'
    def branch = project.findProperty(branchProp) as String
    println("Current branch: $branch")
    if (branch != null) {
        branch = branch.substring(branch.lastIndexOf('/') + 1)
        return branch == 'master'
    }
    return false
}

static String makeTaskName(String prefix, Boolean local) {
    return prefix + (local ? "Local" : "Distrib")
}

static void makeDirs(Path path) {
    File dir = path.toFile()
    if (!dir.exists()) {
        dir.mkdirs()
    }
}

static Path getSubDir(Path dir, String... subDir) {
    def newDir = dir
    for (s in subDir) {
        newDir = newDir.resolve(s)
    }
    return newDir
}

static void writeJson(Map<String, Object> json, Path path) {
    def str = JsonOutput.prettyPrint(JsonOutput.toJson(json))
    path.toFile().write(str, 'UTF-8')
}

void createCleanTasks() {
    [true, false].forEach { local ->
        def dir = local ? installPathLocal : distribBuildPath
        task(makeTaskName(cleanInstallDirTaskPrefix, local)) {
            group(local ? localGroup : distribGroup)
            doLast {
                dir.deleteDir()
            }
        }
    }
}
createCleanTasks()

@SuppressWarnings("unused")
void createInstallTasks(Boolean local, Path specPath, Path mainInstallPath) {
    def groupName = local ? localGroup : distribGroup
    def cleanDirTask = getTasks().getByName(makeTaskName(cleanInstallDirTaskPrefix, local))
    def args = [type: Copy, dependsOn: cleanDirTask, group: groupName]

    task (args, makeTaskName(copyLibrariesTaskPrefix, local)) {
        from librariesPath
        into mainInstallPath.resolve(librariesPath)
    }

    task (args, makeTaskName(installLibsTaskPrefix, local)) {
        from configurations.deploy
        into mainInstallPath.resolve(jarsPath)
    }

    task ([type: Copy, group: groupName, dependsOn: [cleanDirTask, shadowJar]], makeTaskName(installKernelTaskPrefix, local)) {
        from shadowJar.outputs
        into mainInstallPath.resolve(jarsPath)
    }

    [true, false].forEach { debug ->
        def specTaskName = createTaskForSpecs(debug, local, groupName, cleanDirTask, specPath, mainInstallPath)
        createMainInstallTask(debug, local, groupName, specTaskName)
    }
}

String createTaskForSpecs(Boolean debug, Boolean local, String group, Task cleanDir, Path specPath, Path mainInstallPath) {
    String taskName = makeTaskName(debug ? "createDebugSpecs" : "createSpecs", local)
    task([group: group], taskName) {
        dependsOn cleanDir, shadowJar
        doLast {
            File kernelFile = files { shadowJar }.singleFile

            List<String> libsCp = files { configurations.deploy }.files.collect {
                it.name
            }.asList()

            makeDirs(mainInstallPath.resolve(jarsPath))
            makeDirs(mainInstallPath.resolve(configDir))
            makeDirs(specPath)

            makeJarArgs(mainInstallPath, kernelFile.name, libsCp, debug ? debuggerConfig : "")
            makeKernelSpec(specPath, local)
        }
    }
    return taskName
}

void createMainInstallTask(Boolean debug, Boolean local, String group, String specsTaskName) {
    def taskNamePrefix = local ? "install" : "prepare"
    def taskNameMiddle = debug ? "Debug": ""
    def taskNameSuffix = local ? "" : "Package"
    def taskName = "$taskNamePrefix$taskNameMiddle$taskNameSuffix"

    def dependencies = [
            local ? copyRunKernelPy : prepareDistributionDir,
            makeTaskName(installKernelTaskPrefix, local),
            makeTaskName(installLibsTaskPrefix, local),
            specsTaskName,
            makeTaskName(copyLibrariesTaskPrefix, local)
    ]

    task([group: group], taskName) {
        dependsOn(dependencies)
    }
}

void makeKernelSpec(Path installPath, Boolean localInstall) {
    def argv = localInstall ?
            Arrays.asList("python",
                    installPath.resolve(runKernelPy).toString(),
                    "{connection_file}",
                    installPath.resolve(jarArgsFile).toString(),
                    installPath.toString()) :
            Arrays.asList("python", "-m", "run_kotlin_kernel", "{connection_file}")

    writeJson([
            "display_name": "Kotlin",
            "language": "kotlin",
            "argv": argv,
    ], installPath.resolve(kernelFile))

    project.copy {
        from logosPath
        into installPath
    }
}

void makeJarArgs(Path installPath, String kernelJarPath, List<String> classPath, String debuggerConfig = "") {
    writeJson([
            "mainJar": kernelJarPath,
            "classPath": classPath,
            "debuggerConfig": debuggerConfig,
    ], installPath.resolve(project.jarArgsFile))
}

/****** Local install ******/

task copyRunKernelPy(type: Copy, dependsOn: cleanInstallDirLocal, group: localGroup) {
    from distributionPath.resolve(runKernelDir).resolve(runKernelPy)
    into installPathLocal
}

createInstallTasks(true, installPathLocal, installPathLocal)

task uninstall(dependsOn: cleanInstallDirLocal, group: localGroup)

apply from: 'distrib.gradle'
